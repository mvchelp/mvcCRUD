@model MvcDemo.DAL.Students

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Students</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Your First Name" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Your Last Name" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GenderId, "Gender", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @foreach (var i in ViewBag.GenderId as SelectList)
                {
                    @Html.RadioButtonFor(model => model.GenderId, i.Value, new { id = i.Text })
                    @Html.LabelFor(model => model.GenderId, i.Text)
                }
                @Html.ValidationMessageFor(model => model.GenderId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CountryId, "Country", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CountryId", null, "Select a Country", htmlAttributes: new { @class = "form-control", @onchange = "StateBind()" })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StateId, "State", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("StateId", new SelectList(string.Empty, "Value", "Text"), "Select a State", htmlAttributes: new { @class = "form-control", @onchange = "CityBind()" })
                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CityId, "City", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CityId", new SelectList(string.Empty, "Value", "Text"), "Select a City", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { type="Email", @class = "form-control", @placeholder = "Your Email Address" } })
                @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { type="password", @class = "form-control", @placeholder = "Your Password" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Your BirthDate" } })
                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Courses, "Course", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-offset-2 col-md-10">
                @{
                int cnt = 0;
                List<MvcDemo.Models.StudentCoursesViewModel> courses = ViewBag.Courses;

                foreach (var course in courses)
                {
                    if (cnt++ % 3 == 0)
                    {

                    }
                    <input type="checkbox"
                           name="selectedCourses"
                           value="@course.CourseId"
                           @(Html.Raw(course.IsSelected ? "checked=\"checked\"" : "")) />
                    @course.CourseName<br />
                }
                }
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/themes/base/css")

   
    <script type="text/javascript">

    $(document).ready(function () {
        initControl();
    });

    function initControl() {

        $("#StateId").attr("disabled", true);
        $("#CityId").attr("disabled", true);

        $('input[type=datetime]').datepicker({
            dateFormat: "dd/MM/yy",
            changeMonth: true,
            changeYear: true,
            yearRange: "-60:+0",
            maxDate: new Date(Date.now())
        });
    }

    function StateBind() {
        $("#StateId").empty();
        $("#StateId").append('<option value="">Select a State</option>');
        $("#StateId").attr("disabled", true);
        $("#CityId").empty();
        $("#CityId").append('<option value="">Select a City</option>');
        $("#CityId").attr("disabled", true);

        if ($("#CountryId").val() > 0) {

            $("#StateId").empty();
            $("#StateId").removeAttr("disabled", "disabled");
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetStates")',
                dataType: 'json',
                data: { id: $("#CountryId").val() },
                success: function (states) {
                    $("#StateId").append('<option value="">Select a State</option>');
                    $.each(states, function (i, state) {
                        $("#StateId").append('<option value="' + state.Value + '">' +
                             state.Text + '</option>');
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    if (XMLHttpRequest.status == 0) {
                        alert(' Check Your Network.');
                    } else if (XMLHttpRequest.status == 404) {
                        alert('Requested URL not found.');
                    } else if (XMLHttpRequest.status == 500) {
                        alert('Internel Server Error.');
                    } else {
                        alert('Unknow Error.\n' + XMLHttpRequest.responseText);
                    }
                }
            });
            return false;
        }
    }

    function CityBind() {

        $("#CityId").empty();
        $("#CityId").append('<option value="">Select a City</option>');
        $("#CityId").attr("disabled", true);

        if ($("#StateId").val() > 0) {

            $("#CityId").empty();
            $("#CityId").removeAttr("disabled", "disabled");
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetCities")',
                dataType: 'json',
                data: { id: $("#StateId").val() },
                success: function (cities) {
                    $("#CityId").append('<option value="">Select a City</option>');
                    $.each(cities, function (i, city) {
                        $("#CityId").append('<option value="' + city.Value + '">' +
                             city.Text + '</option>');
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    if (XMLHttpRequest.status == 0) {
                        alert(' Check Your Network.');
                    } else if (XMLHttpRequest.status == 404) {
                        alert('Requested URL not found.');
                    } else if (XMLHttpRequest.status == 500) {
                        alert('Internel Server Error.');
                    } else {
                        alert('Unknow Error.\n' + XMLHttpRequest.responseText);
                    }
                }
            });
            return false;
        }
    }

    </script>  
}
